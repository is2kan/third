Техническое задание (ТЗ) для чат-приложения
1. Введение
Целью данного проекта является создание чат-приложения, которое позволяет пользователям обмениваться текстовыми сообщениями в реальном времени. Приложение должно поддерживать различные типы чатов, такие как индивидуальные и групповые чаты, а также возможность отправки приватных сообщений.

2. Требования к функционалу
2.1. Пользовательский интерфейс
Регистрация и авторизация:

Пользователи могут зарегистрироваться в приложении, предоставив имя пользователя и пароль.
Авторизация по имени пользователя и паролю.
Возможность восстановления пароля.
Главный экран:

После авторизации пользователь видит список доступных чатов:
Личный чат с каждым зарегистрированным пользователем.
Групповые чаты, в которых состоит пользователь.
Возможность создать новый чат:
Новый индивидуальный чат (с выбранным пользователем).
Новый групповой чат (с возможностью добавлять нескольких участников).
Возможность отправки и получения текстовых сообщений в реальном времени.
Чат:

Возможность отправлять и получать текстовые сообщения.
Отображение истории сообщений (до 50 сообщений на экране).
Поддержка отображения времени отправки сообщений.
Приватные сообщения:

Пользователи могут отправлять друг другу приватные сообщения.
Приватные сообщения отображаются только у отправителя и получателя.
Групповой чат:

Возможность создать групповой чат, добавляя участников.
Отображение списка участников чата.
Возможность отправлять сообщения в групповом чате.
Оповещения:

Пользователь получает уведомления о новых сообщениях.
Уведомления о том, когда кто-то подключился или покинул чат (для групповых чатов).
Настройки профиля:

Возможность изменить имя пользователя.
Изменение пароля.
2.2. Серверная часть
Сервер чата (Spring Boot):

Сервер должен обрабатывать запросы от клиентов и предоставлять соответствующий функционал.
Использование REST API для базовых операций (регистрация, авторизация, получение списка чатов).
Для обмена сообщениями в реальном времени будет использоваться WebSocket.
Веб-сокеты должны поддерживать двустороннюю передачу данных между клиентом и сервером для мгновенной доставки сообщений.
База данных (Hibernate + MySQL/PostgreSQL):

Таблица пользователей:
id (PK)
username (unique)
password
email (optional)
Таблица сообщений:
id (PK)
chat_id (FK)
sender_id (FK, user)
message
timestamp
Таблица чатов:
id (PK)
type (private/group)
name (для группового чата)
Таблица участников чатов:
chat_id (FK)
user_id (FK)
WebSocket:

Сервер использует WebSocket для установления постоянного соединения с клиентами.
WebSocket-соединение для отправки и получения сообщений в реальном времени.
Возможность создания новых чатов и подключение пользователей к существующим чатам.
2.3. Клиентская часть
Клиент на Java (консольное или графическое приложение):

Реализовать консольный клиент с использованием библиотеки для работы с WebSocket.
Для графического интерфейса можно использовать JavaFX или Swing.
Подключение клиента к серверу по WebSocket.
Отображение списка чатов и сообщений.
Взаимодействие с сервером через REST API для получения данных о чате, отправки сообщений и изменения настроек.
Функциональные особенности клиента:

Регистрация и авторизация пользователей через консоль или GUI.
Просмотр доступных чатов (личных и групповых).
Ожидание новых сообщений через WebSocket.
Отправка сообщений в чаты.
2.4. Описание архитектуры
Клиент-серверная архитектура:
Клиент (Java консоль или GUI) отправляет запросы серверу (Spring Boot) через REST API и WebSocket для обработки сообщений в реальном времени.
Сервер обрабатывает запросы, сохраняет данные в базе данных и направляет сообщения к соответствующим клиентам через WebSocket.
Компоненты:
Spring Boot сервер с использованием WebSocket для обмена сообщениями в реальном времени.
База данных (MySQL/PostgreSQL) для хранения данных о пользователях, чатах и сообщениях.
Java-клиент для взаимодействия с сервером и отправки/получения сообщений.
3. Технологии
Серверная часть:

Леонид, [09.01.2025 17:33]
Spring Boot — для создания REST API и реализации WebSocket.
Hibernate — для работы с базой данных (MySQL/PostgreSQL).
WebSocket — для реального времени.
Клиентская часть:

Java — для написания клиентского приложения.
JavaFX или Swing — для создания графического интерфейса.
WebSocket-клиент — для работы с WebSocket-соединением.
База данных:

MySQL или PostgreSQL для хранения данных.
4. Технические требования
Безопасность:

Пароли пользователей должны быть зашифрованы (использование bcrypt).
Защищенные соединения через HTTPS для обмена данными.
Валидация и защита от SQL-инъекций и XSS атак.
Производительность:

Поддержка одновременного подключения нескольких пользователей.
Использование WebSocket для быстрой и эффективной передачи данных в реальном времени.
5. План разработки
Этап 1: Разработка серверной части

Настройка Spring Boot проекта.
Реализация моделей данных для базы данных.
Реализация REST API для регистрации, авторизации и получения чатов.
Настройка WebSocket для отправки сообщений в реальном времени.
Этап 2: Разработка клиентской части

Создание консольного приложения или графического интерфейса.
Подключение клиента к серверу через WebSocket.
Реализация отправки и получения сообщений.
Этап 3: Тестирование и отладка

Тестирование на стабильность соединений, производительность и безопасность.
Отладка клиентской и серверной части, проверка функционала.
Этап 4: Дополнительные функции и улучшения

Добавление функционала для групповых чатов.
Интеграция с внешними сервисами (например, для восстановления пароля через email).
6. Ожидаемые результаты
Рабочий чат-сервер с поддержкой WebSocket.
Реализованный клиент с возможностью отправки и получения сообщений.
База данных для хранения пользователей, чатов и сообщений.
Это ТЗ предоставляет четкие этапы для реализации чат-приложения, соблюдая основные требования и используя указанные технологии.